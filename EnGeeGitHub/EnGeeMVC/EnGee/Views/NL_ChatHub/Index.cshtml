@{
    Layout = "_LayoutIndex";
}
<style>
    .connected-message {
        background-color: #ede1e3;
    }

    .disconnected-message {
        background-color: #e1f1e7;
    }

    .private-message {
        background-color: #d1dfe8;
    }

    .default-message {
        background-color: #c9cbe0;
    }

    .swal2-popup.swal2-modal {
        font-size: 12pt;
    }

    .swal2-modal .swal2-title {
        font-size: 1.4em;
    }

</style>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@8"></script>

<body class="container">

    <div class="row">
        <div class="col-12">
            <h3>聊天室</h3>
            <div class="list-group" id="Content" style="height: 330px; overflow-y: auto; background-color: #edeef0;">
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-8">
            <h4>名稱: <span id="SelfID"></span></h4>
            <div class="mb-3">
                <label for="message" class="form-label">發送訊息</label>
                <input type="text" class="form-control" id="message">
            </div>
            <div class="mb-3">
                <label for="sendToID" class="form-label">私訊(輸入使用者名稱)</label>
                <input type="text" class="form-control" id="sendToID">
            </div>
            <button type="button" class="btn btn-primary " id="sendButton">傳送訊息</button>
        </div>
        <div class="col-4">
            <h4>線上使用者</h4>
            <ul class="list-group" id="IDList" style="height: 200px; overflow-y: auto;">
            </ul>
        </div>
    </div>
</body>

@section scripts{
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script>
        var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

        // 與Server建立連線
        connection.start().then(function () {
            console.log("Hub 連線完成");

            // SignalR連接成功後，要求使用者輸入ID
            login();
        }).catch(function (err) {
            alert('連線錯誤: ' + err.toString());
        });

        // 更新連線 ID 列表事件
        connection.on("UpdList", function (jsonList) {
            var list = JSON.parse(jsonList);
            $("#IDList li").remove();
            for (i = 0; i < list.length; i++) {
                $("#IDList").append($("<li></li>")
                    .attr("class", "list-group-item")
                    .css("background-color", "#eeb8b8")
                    .text(list[i])
                );
            }

        });

        // 更新用戶個人連線 ID 事件
        connection.on("UpdSelfID", function (id) {
            $('#SelfID').html(id);
        });

        // 更新聊天內容事件
        connection.on("UpdContent", function (msg) {
            var listItem = $("<li></li>")
                .addClass("list-group-item")
                .css("color", "black");

            // 取得目前日期和時間
            var currentTime = new Date();
            var formattedDate = currentTime.toLocaleDateString(); // 取得日期部分
            var formattedTime = currentTime.toLocaleTimeString(); // 取得時間部分

            // 將日期和時間結合
            var dateTimeString = formattedDate + " " + formattedTime;

            // 將日期時間放在訊息之前，用空格分隔
            var messageWithDateTime = "⏰ (" + dateTimeString + ")" + msg;

            // 根據訊息內容判斷訊息類型並設定相應的顏色
            if (msg.indexOf("進入聊天室") !== -1) {
                listItem.addClass("connected-message");
            } else if (msg.indexOf("離開聊天室") !== -1) {
                listItem.addClass("disconnected-message");
            } else if (msg.indexOf("私訊") !== -1) {
                listItem.addClass("private-message");
            } else {
                listItem.addClass("default-message");
            }

            listItem.text(messageWithDateTime);
            $("#Content").append(listItem);

            var contentElement = document.getElementById("Content");
            contentElement.scrollTop = contentElement.scrollHeight;
        });

        //傳送訊息
        $('#sendButton').on('click', function () {
            let selfID = $('#SelfID').html();
            let message = $('#message').val();
            let sendToID = $('#sendToID').val();
            connection.invoke("SendMessage", selfID, message, sendToID)
                .then(function () {
                    $('#message').val('');
                })
                .catch(function (err) {
                    alert('傳送錯誤: ' + err.toString());
                });
        });

        $('#message').on('keydown', function (event) {
            if (event.keyCode === 13) { // 如果按下的是 Enter 鍵 (keycode 13)
                event.preventDefault(); // 防止換行
                $('#sendButton').click(); // 觸發傳送訊息按鈕的點擊事件
            }
        });

        connection.on("UserIdInUse", function () {
            const retry = confirm("輸入的ID已經被使用。請重新輸入ID？");
            if (retry) {
                // 使用者想要重新輸入ID
                login()
            }
            else {
                // 使用者選擇不重試，可以添加其他處理邏輯或顯示消息
                window.location.href = "@Url.Action("Index", "Home")";
            }
        });

        function login() {
            const userId = prompt("請輸入您的名稱：");
            if (userId) {
                // 使用者提供了ID，將其傳遞到後端

                connection.invoke("SetUserId", userId).catch(err => console.error(err));
            }
            else {
                window.location.href = "@Url.Action("Index", "Home")";
            }
        }
    </script>
}
